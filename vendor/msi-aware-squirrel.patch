diff --git a/src/Squirrel/UpdateManager.ApplyReleases.cs b/src/Squirrel/UpdateManager.ApplyReleases.cs
index 1dbd7c5f4444608b11d3f05df4e44b50ca536cae..aebf5c235493b2518cd5ce47fb4066a9200820ce 100644
--- a/src/Squirrel/UpdateManager.ApplyReleases.cs
+++ b/src/Squirrel/UpdateManager.ApplyReleases.cs
@@ -60,16 +60,18 @@ public async Task<string> ApplyReleases(UpdateInfo updateInfo, bool silentInstal
                     "Failed to invoke post-install");
                 progress(75);
 
-                this.Log().Info("Starting fixPinnedExecutables");
-                this.ErrorIfThrows(() => fixPinnedExecutables(updateInfo.FutureReleaseEntry.Version));
+                this.Log().Info("MSI Aware - skip fixPinnedExecutables");
+                //this.Log().Info("Starting fixPinnedExecutables");
+                //this.ErrorIfThrows(() => fixPinnedExecutables(updateInfo.FutureReleaseEntry.Version));
 
-                this.Log().Info("Fixing up tray icons");
+                this.Log().Info("MSI Aware - skip fixing tray icons");
+                //this.Log().Info("Fixing up tray icons");
 
-                var trayFixer = new TrayStateChanger();
-                var appDir = new DirectoryInfo(Utility.AppDirForRelease(rootAppDirectory, updateInfo.FutureReleaseEntry));
-                var allExes = appDir.GetFiles("*.exe").Select(x => x.Name).ToList();
+                //var trayFixer = new TrayStateChanger();
+                //var appDir = new DirectoryInfo(Utility.AppDirForRelease(rootAppDirectory, updateInfo.FutureReleaseEntry));
+                //var allExes = appDir.GetFiles("*.exe").Select(x => x.Name).ToList();
 
-                this.ErrorIfThrows(() => trayFixer.RemoveDeadEntries(allExes, rootAppDirectory, updateInfo.FutureReleaseEntry.Version.ToString()));
+                //this.ErrorIfThrows(() => trayFixer.RemoveDeadEntries(allExes, rootAppDirectory, updateInfo.FutureReleaseEntry.Version.ToString()));
                 progress(80);
 
                 unshimOurselves();
@@ -193,6 +195,8 @@ public async Task FullUninstall()
 
             public void CreateShortcutsForExecutable(string exeName, ShortcutLocation locations, bool updateOnly, string programArguments, string icon)
             {
+                this.Log().Info("MSI Aware - skip creating shortcuts");
+                return; // disabled code path for MSI powered installation
                 this.Log().Info("About to create shortcuts for {0}, rootAppDir {1}", exeName, rootAppDirectory);
 
                 var releases = Utility.LoadLocalReleases(Utility.LocalReleaseFileForAppDir(rootAppDirectory));
@@ -346,10 +350,11 @@ async Task<ReleaseEntry> createFullPackagesFromDeltas(IEnumerable<ReleaseEntry>
             void executeSelfUpdate(SemanticVersion currentVersion)
             {
                 var targetDir = getDirectoryForRelease(currentVersion);
-                var newSquirrel = Path.Combine(targetDir.FullName, "Squirrel.exe");
+                var newSquirrel = Path.Combine(targetDir.FullName, "MsiSquirrel.exe");  // ship special MSI powered installation
                 if (!File.Exists(newSquirrel)) {
                     return;
                 }
+                this.Log().Info("MSI Aware self update via MsiSquirrel.exe");
 
                 // If we're running in the context of Update.exe, we can't 
                 // update ourselves. Instead, ask the new Update.exe to do it
@@ -393,7 +398,7 @@ async Task invokePostInstall(SemanticVersion currentVersion, bool isInitialInsta
 
                 // If this is the first run, we run the apps with first-run and 
                 // *don't* wait for them, since they're probably the main EXE
-                if (squirrelApps.Count == 0) {
+                if (squirrelApps.Count == 0 && false) {  // disabled code path for MSI powered installation
                     this.Log().Warn("No apps are marked as Squirrel-aware! Going to run them all");
 
                     squirrelApps = targetDir.EnumerateFiles()
@@ -417,6 +422,7 @@ async Task invokePostInstall(SemanticVersion currentVersion, bool isInitialInsta
 
             void fixPinnedExecutables(SemanticVersion newCurrentVersion, bool removeAll = false)
             {
+                return; // disabled code path for MSI powered installation
                 if (Environment.OSVersion.Version < new Version(6, 1)) {
                     this.Log().Warn("fixPinnedExecutables: Found OS Version '{0}', exiting...", Environment.OSVersion.VersionString);
                     return;
diff --git a/src/Squirrel/UpdateManager.InstallHelpers.cs b/src/Squirrel/UpdateManager.InstallHelpers.cs
index 441b0f5645d0e44e0f431d341cf0ad3aa0acb638..ff4ec67c539a40c2f904eb64ba6a05c66c5fedb8 100644
--- a/src/Squirrel/UpdateManager.InstallHelpers.cs
+++ b/src/Squirrel/UpdateManager.InstallHelpers.cs
@@ -31,6 +31,7 @@ public InstallHelperImpl(string applicationName, string rootAppDirectory)
             const string uninstallRegSubKey = @"Software\Microsoft\Windows\CurrentVersion\Uninstall";
             public async Task<RegistryKey> CreateUninstallerRegistryEntry(string uninstallCmd, string quietSwitch)
             {
+                return null; // disabled code path for MSI powered installation
                 var releaseContent = File.ReadAllText(Path.Combine(rootAppDirectory, "packages", "RELEASES"), Encoding.UTF8);
                 var releases = ReleaseEntry.ParseReleaseFile(releaseContent);
                 var latest = releases.Where(x => !x.IsDelta).OrderByDescending(x => x.Version).First();
diff --git a/src/Update/Program.cs b/src/Update/Program.cs
index 3a026a29136148df75201bcdf55a1a1a44c8e0df..5eb6159747bd556c1e193fbfa6f7b2c4a5290b98 100644
--- a/src/Update/Program.cs
+++ b/src/Update/Program.cs
@@ -318,13 +318,16 @@ public async Task<string> CheckForUpdate(string updateUrl, string appName = null
             using (var mgr = new UpdateManager(updateUrl, appName)) {
                 var updateInfo = await mgr.CheckForUpdate(progress: x => Console.WriteLine(x));
                 var releaseNotes = updateInfo.FetchReleaseNotes();
+                var currentVersion = ensureCurrentVersion(updateInfo.CurrentlyInstalledVersion);
 
                 var sanitizedUpdateInfo = new {
-                    currentVersion = updateInfo.CurrentlyInstalledVersion.Version.ToString(),
+                    currentVersion = currentVersion.ToString(),
                     futureVersion = updateInfo.FutureReleaseEntry.Version.ToString(),
-                    releasesToApply = updateInfo.ReleasesToApply.Select(x => new {
-                        version = x.Version.ToString(),
-                        releaseNotes = releaseNotes.ContainsKey(x) ? releaseNotes[x] : "",
+                    releasesToApply = updateInfo.ReleasesToApply
+                        .Where(x=>x.Version > currentVersion)
+                        .Select(x => new {
+                            version = x.Version.ToString(),
+                            releaseNotes = releaseNotes.ContainsKey(x) ? releaseNotes[x] : "",
                     }).ToArray(),
                 };
 
@@ -562,6 +565,67 @@ public void ShowHelp()
             opts.WriteOptionDescriptions(Console.Out);
         }
 
+        SemanticVersion ensureCurrentVersion(ReleaseEntry currentlyInstalledVersion) {
+            var currentVersionString = currentlyInstalledVersion?.Version != null ? currentlyInstalledVersion.Version.ToString() : "0.0.0";
+            if (currentVersionString == "0.0.0")
+            {
+                this.Log().Info("MSI Aware - No locally installed release package found. This is likely the first update of an MSI install. Looking for latest version via App folder name.");
+                try
+                {
+                    var appFolderPrefix = "app-";
+                    var subDirs = Directory.EnumerateDirectories(Path.GetDirectoryName(Assembly.GetExecutingAssembly().Location)).Select(x => new DirectoryInfo(x));
+                    var appDirNames = subDirs
+                        .Where(x => x.Name.StartsWith(appFolderPrefix))
+                        .Where(x => x.GetFiles(".dead").Count() == 0)
+                        .Select(x => x.Name);
+                    var currentVersion = SemanticVersion.Parse(currentVersionString);
+
+                    if (appDirNames.Count() == 0)
+                    {
+                        this.Log().Error("MSI Aware - No App folders found or all marked as .dead. Unable to retrieve version.");
+                    }
+                    foreach (var appDirName in appDirNames)
+                    {
+                        SemanticVersion version;
+                        if (SemanticVersion.TryParse(appDirName.Substring(appFolderPrefix.Length, appDirName.Length - appFolderPrefix.Length), out version))
+                        {
+                            currentVersion = version > currentVersion ? version : currentVersion;
+                        }
+                    }
+                    currentVersionString = currentVersion.ToString();
+                }
+                catch (Exception ex)
+                {
+                    this.Log().ErrorException("MSI Aware - Failed to retrieve latest version via App folder name.", ex);
+                }
+            }
+
+            // If we still have no version then lets look into the installInfo file. This should not happen btw.
+            if (currentVersionString == "0.0.0")
+            {
+                this.Log().Warn("MSI Aware - No local release package found and version retrieval via App folder naming failed. Looking for version in MSI installInfo file.");
+                var installInfoFile = Path.Combine(Path.GetDirectoryName(Assembly.GetExecutingAssembly().Location), ".installInfo.json");
+                if (File.Exists(installInfoFile))
+                {
+                    try
+                    {
+                        dynamic x = SimpleJson.DeserializeObject(File.ReadAllText(installInfoFile));
+                        currentVersionString = x.baseVersion;
+                    }
+                    catch (Exception ex)
+                    {
+                        this.Log().ErrorException("MSI Aware - Failed to read version from installInfo file. Gonna report version 0.0.0", ex);
+                    }
+                }
+                else
+                {
+                    this.Log().Warn("MSI Aware - installInfo file not found. Gonna report version 0.0.0");
+                }
+            }
+
+            return SemanticVersion.Parse(currentVersionString);
+        }
+
         void waitForParentToExit()
         {
             // Grab a handle the parent process
